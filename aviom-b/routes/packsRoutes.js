const express = require("express");
const db = require("../db");
const router = express.Router();

// üìå R√©cup√©rer tous les packs
router.get("/packs", async (req, res) => {
  try {
    const [rows] = await db.query("SELECT * FROM packs");
    res.json(rows);
  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration packs:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// üìå R√©cup√©rer tous les Flex
router.get("/Flex", async (req, res) => {
  try {
    const [rows] = await db.query("SELECT * FROM Flex");
    res.json(rows);
  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration flex:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});
// üìå R√©cup√©rer les informations personnelles
router.get("/informations_personnelles", async (req, res) => {
  try {
    const [rows] = await db.query("SELECT * FROM informations_personnelles LIMIT 1");
    res.json(rows);
  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration informations_personnelles:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// üìå Mettre √† jour les informations personnelles
router.put("/informations_personnelles", async (req, res) => {
  const { entite, raison_sociale, numero_siret, nom, prenom, telephone, email, adresse, code_postal, ville, pays } = req.body;

  try {
    const [result] = await db.query(
      `UPDATE informations_personnelles 
       SET entite=?, raison_sociale=?, numero_siret=?, nom=?, prenom=?, telephone=?, email=?, adresse=?, code_postal=?, ville=?, pays=?
       WHERE id = 1`,
      [entite, raison_sociale, numero_siret, nom, prenom, telephone, email, adresse, code_postal, ville, pays]
    );

    console.log("üîç Nombre de lignes affect√©es :", result.affectedRows);

    if (result.affectedRows > 0) {
      res.json({ message: "‚úÖ Informations mises √† jour avec succ√®s !" });
    } else {
      res.status(400).json({ error: "‚ö†Ô∏è Aucune mise √† jour effectu√©e, ID incorrect ?" });
    }
  } catch (error) {
    console.error("‚ùå Erreur mise √† jour des informations :", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});


// üìå R√©cup√©rer tous les Packs Perso
router.get("/packs_perso", async (req, res) => {
  try {
    const [rows] = await db.query("SELECT * FROM packs_perso");
    res.json(rows);
  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration packs_perso:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// üìå R√©cup√©rer tous les VM Packs
router.get("/vm_packs", async (req, res) => {
  try {
    const [rows] = await db.query("SELECT * FROM vm_packs");
    res.json(rows);
  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration vm_packs:", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

module.exports = router;
